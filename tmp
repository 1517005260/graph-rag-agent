(graphrag) (base) glk@ggg:~/project/graphrag-agent/evaluator/test$ python evaluate_graph_agent.py --questions_file=questions.json
初始化Graph Agent和评估组件...
加载了3个问题待评估
仅评估检索性能...
处理问题 1/3: 优秀学生申请的条件?...
性能指标 - fast_cache_check: 3.0117s
Building prefix dict from the default dictionary ...
Loading model from cache /tmp/jieba.cache
Loading model cost 0.926 seconds.
Prefix dict has been built successfully.
处理问题 2/3: 获得优秀学生称号的奖励是什么?...
性能指标 - fast_cache_check: 1.4779s
处理问题 3/3: 国家奖学金和国家励志奖学金互斥吗?...
性能指标 - fast_cache_check: 4.5446s
  已保存graph的回答到 ./evaluation_results/graph_agent/answers/graph_answers.json

======== 开始评估检索性能 ========
样本总数: 3

处理样本 1:
  问题: 优秀学生申请的条件?...
  代理类型: graph
  回答前100字符: ### 优秀学生申请的条件

优秀学生的申请条件主要包括以下几个方面：

首先，申请者必须是华东理工大学全日制在校的二、三、四年级本科生，热爱祖国，维护国家利益和民族团结，具有强烈的社会责任感和积极向...
  当前引用实体数量: 3
  当前引用关系数量: 2
  提取的引用数据:
    实体: ['8', '0', '1']
    关系: ['5', '7']
    文本块: ['e5437ee9f4f170f1c28f94f94bd6eda1becbfe0a']
  处理非Naive代理的引用数据...
  添加了0个实体和0个关系
  最终引用实体数量: 3
  最终引用关系数量: 2

处理样本 2:
  问题: 获得优秀学生称号的奖励是什么?...
  代理类型: graph
  回答前100字符: 获得优秀学生称号的奖励标准如下：

- 全国“优秀学生”奖励1000元。
- 市“优秀学生标兵”奖励500元。
- 市“优秀学生”奖励500元。
- 校“优秀学生”奖励150元。

这些奖励旨在表彰在...
  当前引用实体数量: 0
  当前引用关系数量: 0
  提取的引用数据:
    实体: []
    关系: []
    文本块: []
  处理非Naive代理的引用数据...
  添加了0个实体和0个关系
  最终引用实体数量: 0
  最终引用关系数量: 0

处理样本 3:
  问题: 国家奖学金和国家励志奖学金互斥吗?...
  代理类型: graph
  回答前100字符: ### 国家奖学金和国家励志奖学金的关系

根据提供的分析报告，国家奖学金和国家励志奖学金之间并不存在互斥关系。具体来说，家庭经济困难的学生可以申请国家励志奖学金，并且这些学生也可以同时获得国家奖学金...
  当前引用实体数量: 2
  当前引用关系数量: 3
  提取的引用数据:
    实体: ['8', '6']
    关系: ['14', '15', '19']
    文本块: []
  处理非Naive代理的引用数据...
  添加了0个实体和0个关系
  最终引用实体数量: 2
  最终引用关系数量: 3

开始计算指标: retrieval_latency
完成指标 retrieval_latency 计算，平均得分: 10.6161

开始计算指标: retrieval_precision

======== RetrievalPrecision 计算日志 ========
样本总数: 3
检索实体列表长度: 3
引用实体列表长度: 3

样本 1:
  检索到的实体数量: 15
  引用的实体数量: 3
  检索实体: ['全国学生资助管理中心', '财政部', '教育资助申请', '经济困难学生', '继续教育']...
  引用实体: ['8', '0', '1']
  获取到的引用实体详细信息: []
  处理后的引用实体: ['8', '0', '1']
  总匹配的实体数量: 0
  原始精确率: 0.0000
  最终精确率分数(加入基础分后): 0.3000

样本 2:
  检索到的实体数量: 15
  引用的实体数量: 0
  检索实体: ['华东理工大学学分制管理规定', '华东理工大学本科生国家奖学金管理办法', '华东理工大学本科生上海市奖学金管理办法', '处分', '家庭经济困难学生']...
  没有检索到实体或引用实体，使用基础分: 0.3

样本 3:
  检索到的实体数量: 15
  引用的实体数量: 2
  检索实体: ['学校', '弄虚作假', '校训', '国家教育考试违规处理办法', '华东理工大学本科生国家奖学金管理办法']...
  引用实体: ['8', '6']
  获取到的引用实体详细信息: []
  处理后的引用实体: ['8', '6']
  总匹配的实体数量: 0
  原始精确率: 0.0000
  最终精确率分数(加入基础分后): 0.3000

平均精确率: 0.3000
======== RetrievalPrecision 计算结束 ========

完成指标 retrieval_precision 计算，平均得分: 0.3000

开始计算指标: retrieval_utilization

======== RetrievalUtilization 计算日志 ========
样本总数: 3
检索实体列表长度: 3
引用实体列表长度: 3

样本 1:
  检索到的实体数量: 15
  引用的实体数量: 3
  检索实体: ['全国学生资助管理中心', '财政部', '教育资助申请', '经济困难学生', '继续教育']...
  引用实体: ['8', '0', '1']
  在检索结果中找到的引用实体数量: 0
  原始利用率: 0.0000
  最终利用率分数(加入基础分后): 0.3000

样本 2:
  检索到的实体数量: 15
  引用的实体数量: 0
  检索实体: ['华东理工大学学分制管理规定', '华东理工大学本科生国家奖学金管理办法', '华东理工大学本科生上海市奖学金管理办法', '处分', '家庭经济困难学生']...
  没有引用实体，使用基础分: 0.3

样本 3:
  检索到的实体数量: 15
  引用的实体数量: 2
  检索实体: ['学校', '弄虚作假', '校训', '国家教育考试违规处理办法', '华东理工大学本科生国家奖学金管理办法']...
  引用实体: ['8', '6']
  在检索结果中找到的引用实体数量: 0
  原始利用率: 0.0000
  最终利用率分数(加入基础分后): 0.3000

平均利用率: 0.3000
======== RetrievalUtilization 计算结束 ========

完成指标 retrieval_utilization 计算，平均得分: 0.3000

开始计算指标: entity_coverage

======== EntityCoverage 计算日志 ========
样本总数: 3

样本 1:
  问题: 优秀学生申请的条件?...
  代理类型: graph
  提取关键词: ['优秀学生申请的条件']
  引用的实体ID数量: 3
  引用实体ID样例: ['8', '0', '1']
  从Neo4j获取的实体数量: 0
  使用原始实体ID作为实体信息
  实体文本长度: 5
  关键词匹配数: 0/1
  匹配率: 0.0000
  实体因子(基于数量): 0.6000
  基础分: 0.4
  质量得分: 0.0000
  实体覆盖率分数: 0.4000

样本 2:
  问题: 获得优秀学生称号的奖励是什么?...
  代理类型: graph
  提取关键词: ['获得优秀学生称号的奖励是什么']
  引用的实体ID数量: 0
  没有实体或关键词，使用基础分: 0.4
  实体覆盖率分数: 0.4000

样本 3:
  问题: 国家奖学金和国家励志奖学金互斥吗?...
  代理类型: graph
  提取关键词: []
  引用的实体ID数量: 2
  引用实体ID样例: ['8', '6']
  从Neo4j获取的实体数量: 0
  使用原始实体ID作为实体信息
  没有实体或关键词，使用基础分: 0.4
  实体覆盖率分数: 0.4000

平均实体覆盖率: 0.4000
======== EntityCoverage 计算结束 ========

完成指标 entity_coverage 计算，平均得分: 0.4000

开始计算指标: relationship_utilization

======== RelationshipUtilization 计算日志 ========
样本总数: 3

样本 1:
  代理类型: graph
  引用的关系数量: 2
  引用的实体数量: 3
  引用关系示例: ['5', '7']
Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 3, column: 31, offset: 50} for query: '\n            MATCH (a)-[r]->(b)\n            WHERE id(r) IN $ids\n            RETURN a.id AS source, type(r) AS relation, b.id AS target,\n                r.description AS description, r.weight AS weight\n            '
  获取到的关系信息数量: 1
  关系信息示例: [{'source': '502a881e7d8bacaebd10f268f370a647d387e5aa', 'relation': 'MENTIONS', 'target': '华东理工大学学生违纪处分规定', 'description': None, 'weight': None}]
评估 relationship_utilization 时出错: RelationshipUtilizationMetric._calculate_quantity_score() takes 2 positional arguments but 3 were given
Traceback (most recent call last):
  File "/home/glk/project/graphrag-agent/evaluator/retrieval_evaluator.py", line 1378, in evaluate
    metric_result, metric_scores = self.metric_class[metric_name].calculate_metric(data)
  File "/home/glk/project/graphrag-agent/evaluator/retrieval_evaluator.py", line 516, in calculate_metric
    quantity_score = self._calculate_quantity_score(rel_info, referenced_rels)
TypeError: RelationshipUtilizationMetric._calculate_quantity_score() takes 2 positional arguments but 3 were given


开始计算指标: graph_coverage

======== GraphCoverage 计算日志 ========
样本总数: 3

样本 1:
  问题: 优秀学生申请的条件?...
  代理类型: graph
  提取关键词: ['优秀学生申请的条件']
  引用的实体数量: 3
  引用的关系数据: ['5', '7']
  提取的关系ID: ['5', '7']
  实体计数: 3
  关系计数: 2
  获取到的实体信息条数: 0
  获取到的关系信息条数: 0
  结构得分: 0.2500
  相关性得分: 0.0000
  连通性得分: 0.4000
  基础分: 0.3
  加权总分: 0.4365
  最终得分: 0.4365
  图覆盖率分数: 0.4365

样本 2:
  问题: 获得优秀学生称号的奖励是什么?...
  代理类型: graph
  提取关键词: ['获得优秀学生称号的奖励是什么']
  引用的实体数量: 0
  引用的关系数据: []
  提取的关系ID: []
  实体计数: 0
  关系计数: 0
  获取到的实体信息条数: 0
  获取到的关系信息条数: 0
  结构得分: 0.0000
  相关性得分: 0.0000
  连通性得分: 0.4000
  基础分: 0.3
  加权总分: 0.3840
  最终得分: 0.3840
  图覆盖率分数: 0.3840

样本 3:
  问题: 国家奖学金和国家励志奖学金互斥吗?...
  代理类型: graph
  提取关键词: []
  引用的实体数量: 2
  引用的关系数据: ['14', '15', '19']
  提取的关系ID: ['14', '15', '19']
  实体计数: 2
  关系计数: 3
  获取到的实体信息条数: 0
  获取到的关系信息条数: 0
  结构得分: 0.2500
  相关性得分: 0.5000
  连通性得分: 0.4000
  基础分: 0.3
  加权总分: 0.5765
  最终得分: 0.5765
  图覆盖率分数: 0.5765

平均图覆盖率: 0.4657
======== GraphCoverage 计算结束 ========

完成指标 graph_coverage 计算，平均得分: 0.4657

开始计算指标: community_relevance
完成指标 community_relevance 计算，平均得分: 0.4000

开始计算指标: subgraph_quality

======== SubgraphQuality 计算日志 ========
样本总数: 3

样本 1:
  实体数量: 15
  关系数量: 2
Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 3, column: 47, offset: 66} for query: '\n                    MATCH (a)-[r]->(b)\n                    WHERE id(r) IN $ids\n                    RETURN a.id AS source, type(r) AS relation, b.id AS target\n                    '
  处理后的关系数量: 1
  关系示例: [('502a881e7d8bacaebd10f268f370a647d387e5aa', 'MENTIONS', '华东理工大学学生违纪处分规定')]
  节点数量: 15
  边数量: 1
  最大可能边数: 105.0
  实际密度: 0.0095
  参与关系的实体数量: 2
  连通性: 0.1333
  密度权重: 0.5
  连通性权重: 0.5
  加权质量分数: 0.0714
  Graph代理奖励后: 0.0750
  最终质量分数: 0.3000

样本 2:
  实体数量: 15
  关系数量: 0
  只有实体没有关系，基于实体数量评分: 0.4500

样本 3:
  实体数量: 15
  关系数量: 3
Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 3, column: 47, offset: 66} for query: '\n                    MATCH (a)-[r]->(b)\n                    WHERE id(r) IN $ids\n                    RETURN a.id AS source, type(r) AS relation, b.id AS target\n                    '
  处理后的关系数量: 3
  关系示例: [('502a881e7d8bacaebd10f268f370a647d387e5aa', 'MENTIONS', '留校察看处分'), ('502a881e7d8bacaebd10f268f370a647d387e5aa', 'MENTIONS', '华东理工大学学生申诉处理规定')]...
  节点数量: 15
  边数量: 3
  最大可能边数: 105.0
  实际密度: 0.0286
  参与关系的实体数量: 5
  连通性: 0.3333
  密度权重: 0.5
  连通性权重: 0.5
  加权质量分数: 0.1810
  Graph代理奖励后: 0.1900
  最终质量分数: 0.3000

平均子图质量: 0.3500
======== SubgraphQuality 计算结束 ========

完成指标 subgraph_quality 计算，平均得分: 0.3500

所有指标计算结果:
  retrieval_latency: 10.6161
  retrieval_precision: 0.3000
  retrieval_utilization: 0.3000
  entity_coverage: 0.4000
  graph_coverage: 0.4657
  community_relevance: 0.4000
  subgraph_quality: 0.3500
======== 检索性能评估结束 ========

保存代理回答以供人工检查...
检查是否需要获取额外回答...
  graph代理的回答文件已存在，跳过

评估结果:
  retrieval_latency: 10.6161
  retrieval_precision: 0.3000
  retrieval_utilization: 0.3000
  entity_coverage: 0.4000
  graph_coverage: 0.4657
  community_relevance: 0.4000
  subgraph_quality: 0.3500
评估结果已保存至: ./evaluation_results/graph_agent/evaluation_results.json